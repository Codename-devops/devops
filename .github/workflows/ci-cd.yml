# =======================================================
# üöÄ CI/CD Pipeline f√ºr die InvoiceApp
# =======================================================
# Diese Datei steuert alles:
#  - Test & Build vom Backend (FastAPI)
#  - Test & Build vom Frontend (React/Next.js)
#  - Deployment zum Kubernetes-Cluster (K3s auf Hetzner)
# =======================================================

name: CI/CD Pipeline

# -----------------------------------------------
# üïì Wann soll die Pipeline starten?
# -----------------------------------------------
# -> Bei jedem Push oder Pull Request auf den Branch "main"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# -----------------------------------------------
# ‚öôÔ∏è Globale Variablen (f√ºr alle Jobs verf√ºgbar)
# -----------------------------------------------
env:
  REGISTRY: docker.io                               # Docker-Registry (Docker Hub)
  IMAGE_BACKEND: hakkibate/invoice-backend          # Name des Backend-Images
  IMAGE_FRONTEND: hakkibate/invoice-frontend        # Name des Frontend-Images

# -----------------------------------------------
# üß† Job 1: Backend (FastAPI)
# -----------------------------------------------
jobs:
  backend:
    name: Backend ‚Äì Test & Build
    runs-on: ubuntu-latest    # GitHub erstellt eine frische Linux-VM f√ºr den Job

    steps:
      # --- Code aus dem GitHub-Repo in die VM laden ---
      - uses: actions/checkout@v4

      # --- Verzeichnis anzeigen (zum Debuggen bei Pfadfehlern) ---
      - name: Show repo tree
        run: |
          pwd && ls -la
          echo "---- backend ----"
          ls -la backend || true

      # --- Python installieren (Version 3.11) ---
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # --- Kurze GitHub Commit-ID generieren (z.B. abc1234) ---
      - name: Short commit SHA
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      # --- Virtuelle Umgebung erstellen und Python-Pakete installieren ---
      # Dadurch bleiben System-Pakete unangetastet (PEP 668-Schutz)
      - name: Install backend deps (venv)
        run: |
          python -m venv .venv                       # Neues virtuelles Python-Environment
          source .venv/bin/activate                  # Aktivieren der venv
          python -m pip install -U pip               # pip aktualisieren
          pip install -r backend/requirements.txt    # Dependencies installieren

      # --- Tests ausf√ºhren (falls keine da: kein Abbruch) ---
      - name: Backend tests
        run: |
          source .venv/bin/activate
          pytest -q || true                          # "|| true" = Fehler ignorieren (weiterlaufen)

      # --- Docker Login ---
      # Verwendet GitHub Secrets (DOCKERHUB_USERNAME + DOCKERHUB_TOKEN)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Docker-Image bauen und zu Docker Hub pushen ---
      - name: Build & push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:latest
            ${{ env.IMAGE_BACKEND }}:${{ env.SHORT_SHA }}


  # -----------------------------------------------
  # üñ•Ô∏è Job 2: Frontend (React/Next.js)
  # -----------------------------------------------
  frontend:
    name: Frontend ‚Äì Test & Build
    runs-on: ubuntu-latest

    steps:
      # --- Code laden ---
      - uses: actions/checkout@v4

      # --- Ordnerstruktur anzeigen (Debug) ---
      - name: Show repo tree
        run: |
          pwd && ls -la
          echo "---- frontend ----"
          ls -la frontend || true

      # --- Node.js installieren (Version 20) ---
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"                              # npm-Cache f√ºr schnelleren Build
          cache-dependency-path: frontend/package-lock.json   # <‚Äî wichtig!

      # --- Kurze Commit-ID (wie oben) ---
      - name: Short commit SHA
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      # --- npm-Pakete installieren ---
      - name: Install frontend deps
        run: npm ci --verbose                                 # ‚Äûci‚Äú = saubere Neuinstallation
        working-directory: frontend

      # --- Build ausf√ºhren ---
      - name: Build frontend
        run: npm run build
        working-directory: frontend

      # --- Tests (optional) ---
      - name: Frontend tests
        run: npm test --if-present || true
        working-directory: frontend

      # --- Docker Login ---
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Docker Image bauen & pushen ---
      - name: Build & push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.IMAGE_FRONTEND }}:${{ env.SHORT_SHA }}

  # -----------------------------------------------
  # ‚ò∏Ô∏è Job 3: Deployment auf Kubernetes (K3s)
  # -----------------------------------------------
  deploy:
    name: Deploy to K3s (Hetzner)
    needs: [ backend, frontend ]      # Wird erst ausgef√ºhrt, wenn BE + FE fertig sind
    runs-on: ubuntu-latest

    steps:
      # --- Code laden (f√ºr k8s-YAML-Dateien) ---
      - uses: actions/checkout@v4

      # --- kubectl installieren ---
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.34.0'

      # --- Kubernetes-Zugangsdaten aus GitHub Secrets schreiben ---
      - name: Write kubeconfig (raw)
        run: echo "${{ secrets.KUBECONFIG_RAW }}" > kubeconfig

      # --- Deployments anwenden & neue Images setzen ---
      - name: Apply manifests & update images
        env:
          KUBECONFIG: kubeconfig
        run: |
          kubectl apply -f k8s/                                  # wendet alle YAML-Dateien im Ordner an
          kubectl set image deployment/invoice-backend backend=${{ env.IMAGE_BACKEND }}:${{ env.SHORT_SHA }} --namespace default || true
          kubectl set image deployment/invoice-frontend frontend=${{ env.IMAGE_FRONTEND }}:${{ env.SHORT_SHA }} --namespace default || true

      # --- Rollout pr√ºfen (ob Pods erfolgreich gestartet sind) ---
      - name: Check rollout status
        env:
          KUBECONFIG: kubeconfig
        run: |
          kubectl rollout status deploy/invoice-backend --timeout=120s || true
          kubectl rollout status deploy/invoice-frontend --timeout=120s || true
