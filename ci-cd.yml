# =======================================================
#  üöÄ CI/CD Workflow f√ºr deine InvoiceApp
#  - Backend (FastAPI)
#  - Frontend (React/Next.js)
#  - Deployment nach K3s (Hetzner)
# =======================================================

name: CI/CD Pipeline

# -----------------------------------------------
# üïì Wann soll die Pipeline laufen?
# -----------------------------------------------
on:
  push:
    branches: [ "main" ]     # bei jedem Push auf "main"
  pull_request:
    branches: [ "main" ]     # oder wenn ein Pull Request kommt

# -----------------------------------------------
# ‚öôÔ∏è Globale Variablen (kannst du oben zentral √§ndern)
# -----------------------------------------------
env:
  REGISTRY: docker.io
  IMAGE_BACKEND: mydockeruser/invoice-backend
  IMAGE_FRONTEND: mydockeruser/invoice-frontend
  SHORT_SHA: ${{ github.sha.substr(0,7) }}

# -----------------------------------------------
# üß† Job 1: Backend (FastAPI)
# -----------------------------------------------
jobs:
  backend:
    name: Backend ‚Äì Test & Build
    runs-on: ubuntu-latest     # GitHub startet eine Linux-VM

    steps:
      # --- Code ins System holen ---
      - uses: actions/checkout@v4
        # l√§dt dein Repository-Code in die VM

      # --- Python installieren ---
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # --- Python-Pakete installieren ---
      - name: Abh√§ngigkeiten installieren
        run: pip install -r backend/requirements.txt

      # --- Tests ausf√ºhren (optional) ---
      - name: Backend testen
        run: pytest -q || true
        # "|| true" = auch wenn keine Tests existieren, weiterlaufen

      # --- Login bei Docker Hub ---
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Docker-Image bauen & pushen ---
      - name: Docker Image bauen & pushen
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:latest
            ${{ env.IMAGE_BACKEND }}:${{ env.SHORT_SHA }}

# -----------------------------------------------
# üñ•Ô∏è Job 2: Frontend (React/Next.js)
# -----------------------------------------------
  frontend:
    name: Frontend ‚Äì Test & Build
    runs-on: ubuntu-latest

    steps:
      # --- Code holen ---
      - uses: actions/checkout@v4

      # --- Node.js installieren ---
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # --- npm Abh√§ngigkeiten installieren ---
      - name: Abh√§ngigkeiten installieren
        run: npm ci
        working-directory: frontend

      # --- Build starten ---
      - name: Frontend bauen
        run: npm run build
        working-directory: frontend

      # --- Tests (optional) ---
      - name: Frontend testen
        run: npm test --if-present || true
        working-directory: frontend

      # --- Login bei Docker Hub ---
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Docker-Image bauen & pushen ---
      - name: Docker Image bauen & pushen
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.IMAGE_FRONTEND }}:${{ env.SHORT_SHA }}

# -----------------------------------------------
# ‚ò∏Ô∏è Job 3: Deployment auf Kubernetes (K3s)
# -----------------------------------------------
  deploy:
    name: Deploy to K3s (Hetzner)
    needs: [ backend, frontend ]      # erst wenn beide Images fertig sind
    runs-on: ubuntu-latest

    steps:
      # --- Repo holen (wegen YAML-Dateien) ---
      - uses: actions/checkout@v4

      # --- kubectl installieren ---
      - name: kubectl installieren
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.34.0'

      # --- kubeconfig schreiben ---
      - name: kubeconfig schreiben
        run: |
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > kubeconfig
        # l√§dt deine Kubernetes-Verbindungsdatei aus GitHub Secrets

      # --- Deployments & Services ausrollen ---
      - name: Deployments aktualisieren
        env:
          KUBECONFIG: kubeconfig
        run: |
          kubectl apply -f k8s/         # erstellt oder aktualisiert alle YAMLs im "k8s"-Ordner
          kubectl set image deployment/invoice-backend backend=${{ env.IMAGE_BACKEND }}:${{ env.SHORT_SHA }} || true
          kubectl set image deployment/invoice-frontend frontend=${{ env.IMAGE_FRONTEND }}:${{ env.SHORT_SHA }} || true

      # --- Rollout pr√ºfen ---
      - name: Rollout √ºberpr√ºfen
        env:
          KUBECONFIG: kubeconfig
        run: |
          kubectl rollout status deploy/invoice-backend --timeout=120s || true
          kubectl rollout status deploy/invoice-frontend --timeout=120s || true
